1) # to scale replicas :- kubectl scale deployment myfirstdeployment --replicas=3

2) # to rollback :- kubectl rollout undo deployment myfirstdeployment --to-revision=1

3) # to deep info of pods :- kubectl get pods -o wide 

4) # volume concept :-
   persistentvolume- persistentvolumeclaim - attach persistentvolumeclaim with deployment.

5) # to get persistent volume :- kubectl get pv 
 
6) # to get persistent volume claim :- kubectl get pvc 

7) # ingress in kubernetes :- used in microservices architecture, One entry point instead of multiple external IP

8) # we create deployment for stateless application which doesn't need persistent volume like :- frontend application 

9) # we use statefulsets for stateful applications which required persistent volume like :- mysql and monogodb and databases.
     jitne replicas banege utni separate storage banage pods ke liye. har ek pod ko unique identity bhi deta hai. 
     Yes, Rolling Updates are possible in StatefulSets

10) # Headless service for statefulsets.- no cluster ip only for internal use. 

11) # kubectl get statefulsets 

12) # Resource Quota :- Requests and limits :- Resource means minimum and limit means maximum, basically we add two things are :- cpu and memory. 

13) # argocd :- continuous delievery to kubernetes, used with git and kubernetes. 

14) # kubectl patch command :- for modify already running existing manifest file , like :- service.yaml 

15) # kubectl port-forward svc/servicename 5000:5000 --address=0.0.0.0 &   - only for Nodeport type. 

16) # 


