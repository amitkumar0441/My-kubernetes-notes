1) # to scale replicas :- kubectl scale deployment myfirstdeployment --replicas=3

2) # to rollback :- kubectl rollout undo deployment myfirstdeployment --to-revision=1

3) # to deep info of pods :- kubectl get pods -o wide 

4) # volume concept :-
   persistentvolume- persistentvolumeclaim - attach persistentvolumeclaim with deployment.

5) # to get persistent volume :- kubectl get pv 
 
6) # to get persistent volume claim :- kubectl get pvc 

7) # ingress in kubernetes :- used in microservices architecture, One entry point instead of multiple external IP

8) # we create deployment for stateless application which doesn't need persistent volume like :- frontend application 

9) # we use statefulsets for stateful applications which required persistent volume like :- mysql and monogodb and databases.
     jitne replicas banege utni separate storage banage pods ke liye. har ek pod ko unique identity bhi deta hai. 
     Yes, Rolling Updates are possible in StatefulSets

10) # Headless service for statefulsets.- no cluster ip only for internal use. 

11) # kubectl get statefulsets 

12) # Resource Quota :- Requests and limits :- Resource means minimum and limit means maximum, basically we add two things are :- cpu and memory. 

13) # argocd :- continuous delievery to kubernetes, used with git and kubernetes. 

14) # kubectl patch command :- for modify already running existing manifest file , like :- service.yaml 

15) # PORT_FORWARDING :-   kubectl port-forward svc/servicename 5000:5000 --address=0.0.0.0 &   - only for Nodeport type. 
                           kubectl port-forward svc/myfirstservice 8080:80 -n mycustomnamespace  &

16) # In the case of argocd, you have to delete application in order to delete all components. 

17) # Taint and Tolerations :-
   first apiserver send request to scheduler to schedule pods on worker node. 
   Taint :- by using it we can prevent scheduling of pod on specific worker node but if i define tolerations then it overshadow taint. 
   Interview answer :- bydefault control plane is tainted 

18) # kubectl taint nodes <node-name> key=value:NoSchedule   - in order to set tainted node 

19) # kubectl taint nodes <node-name> key=value:NoSchedule-     - in order to remove from tainted 


20) # Metric server :- in order to get pod how much resource is  consuming. 
      metric server ka pod create karo kube-system namespace ke liye.:-
     --- kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
     --- kubectl get pods -n kube-system

      kubectl top node :- to see metrics. 
      metric server should be configured for autoscaling purpose for pod. 

21) # Autoscaling in kubernetes :- HPA - Horizontal pod autoscaling , VPA :- vertical horizontal autoscaling 
      HPA :- basically replicas bante rehte hai automatically jab bhi metrics trigeer hota hai 
      VPA :- pod ke resources increase hote rehte hai jab bhi traffic badta rehata hai, but VPA only used for stateful applications means for databases.
      Once HPA is applied, the replicas in the Deployment is no longer fixed. Kubernetes will scale based on the defined minReplicas and maxReplicas in HPA. 

      a) create a seperate namespace for hpa purpose.
      b) create hpa manifest file and apply it. 

22) # VPA :- only for stateful application and under it the size of single pod increased not multiple replicas will be created. 
first install vpa :- 
git clone https://github.com/kubernetes/autoscaler.git
cd autoscaler-master/vertical-pod-autoscaler 
./hack/vpa-up.sh
kubectl get pods -n kube-system | grep vpa    - to check vpa has been installed or not. 


23) # Node Affinity :- 
To Schedule a particular pod on a specific worker node 
Taint is opposite of Node affinity. 

24) # RBAC :-Role base access control. 
Resources :- deployment , pod, service 
verbs :- get,  apply, delete, create , patch, watch
Main component :-  Roles,  Role Binding, Service account , user 
Namespace level role and Cluster level role. 
Important commands :-

kubectl auth whoami 
default user :- kubernetes-admin
kubectl auth can-i get pods 
kubectl auth can-i get pods -n apachenamespace 
kubectl auth can-i get pods --as=system:serviceaccount:mycustomnamespace:amit-sa -n mycustomnamespace

* create a role :- 
-----------------------kubectl get roles -n mycustomnamespace 
* create a service account :- 
-----------------------kubectl get serviceaccounts -n mycustomnamespace 
* create a role bindig :- 
-----------------------kubectl get rolebinding -n mycustomnamespace 


25) # KUBECONFIG :- 
The kubeconfig file is a configuration file used by kubectl to connect to and interact with Kubernetes clusters.
It contains important information about the cluster and user credentials, allowing kubectl to access the cluster and perform operations.
